<?php

declare(strict_types=1);

namespace Tests\Unit\Application\Service\Transaction;

use ProBillerNG\Transaction\Application\Services\Transaction\PerformRocketgateCancelRebillCommand;
use Tests\UnitTestCase;

class PerformRocketgateCancelRebillCommandTest extends UnitTestCase
{
    /**
     * @var string
     */
    private $transactionId;

    /**
     * @var string
     */
    private $merchantId;

    /**
     * @var string
     */
    private $merchantPassword;

    /**
     * @var string
     */
    private $merchantCustomerId;

    /**
     * @var string
     */
    private $merchantInvoiceId;

    /**
     * Setup function
     * @return void
     */
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->transactionId      = '622ff331-5f5c-33df-ac20-71f426e59131';
        $this->merchantId         = '123';
        $this->merchantPassword   = 'dsfasdfasd23423';
        $this->merchantCustomerId = '123adfasdf';
        $this->merchantInvoiceId  = '123adfasdf';
    }

    /**
     * @test
     * @return PerformRocketgateCancelRebillCommand
     */
    public function it_should_create_a_perform_rocketgate_cancel_rebill_command(): PerformRocketgateCancelRebillCommand
    {
        $command = new PerformRocketgateCancelRebillCommand(
            $this->transactionId,
            $this->merchantId,
            $this->merchantPassword,
            $this->merchantCustomerId,
            $this->merchantInvoiceId
        );
        $this->assertInstanceOf(PerformRocketgateCancelRebillCommand::class, $command);
        return $command;
    }

    /**
     * @test
     * @depends it_should_create_a_perform_rocketgate_cancel_rebill_command
     * @param PerformRocketgateCancelRebillCommand $command The command
     * @return void
     */
    public function it_should_contain_a_transaction_id(PerformRocketgateCancelRebillCommand $command): void
    {
        $this->assertSame($this->transactionId, $command->transactionId());
    }

    /**
     * @test
     * @depends it_should_create_a_perform_rocketgate_cancel_rebill_command
     * @param PerformRocketgateCancelRebillCommand $command The command
     * @return void
     */
    public function it_should_contain_a_merchant_id(PerformRocketgateCancelRebillCommand $command): void
    {
        $this->assertSame($this->merchantId, $command->merchantId());
    }

    /**
     * @test
     * @depends it_should_create_a_perform_rocketgate_cancel_rebill_command
     * @param PerformRocketgateCancelRebillCommand $command The command
     * @return void
     */
    public function it_should_contain_a_merchant_password(PerformRocketgateCancelRebillCommand $command): void
    {
        $this->assertSame($this->merchantPassword, $command->merchantPassword());
    }
    
    /**
     * @test
     * @depends it_should_create_a_perform_rocketgate_cancel_rebill_command
     * @param PerformRocketgateCancelRebillCommand $command The command
     * @return void
     */
    public function it_should_contain_a_merchant_customer_id(PerformRocketgateCancelRebillCommand $command): void
    {
        $this->assertSame($this->merchantCustomerId, $command->merchantCustomerId());
    }

    /**
     * @test
     * @depends it_should_create_a_perform_rocketgate_cancel_rebill_command
     * @param PerformRocketgateCancelRebillCommand $command The command
     * @return void
     */
    public function it_should_contain_a_merchant_invoice_id(PerformRocketgateCancelRebillCommand $command): void
    {
        $this->assertSame($this->merchantInvoiceId, $command->merchantInvoiceId());
    }
}
